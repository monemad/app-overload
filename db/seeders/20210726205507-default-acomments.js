'use strict';

module.exports = {
  up: (queryInterface, Sequelize) => {

      return queryInterface.bulkInsert('AnswerComments', [
        { comment: `Can you provide an example?`, votes: 67, answerId: 4, userId: 1, createdAt: new Date(), updatedAt: new Date() },
        { comment: `The page I linked to seems to have a number of examples. Could you tell me what example you think is missing?`, votes: 15, answerId: 4, userId: 17, createdAt: new Date(), updatedAt: new Date() },
        { comment: `In general though, link-only answers are fragile because they could, at any moment, be broken. That said, this answer seems good enough in that it's highlighting the general conditions under which OPTIONS blocks don't send. Would be nice if it had the list of accepted HEADERS, or which content-types require OPTIONS, etc but it's a good start`, votes: 56, answerId: 4, userId: 39, createdAt: new Date(), updatedAt: new Date() },
        { comment: `It fails for me when I use it with credentials. :( Everything else worked like a charm.. But its of no use to me if it fails withCredentials set to true`, votes: 64, answerId: 5, userId: 4, createdAt: new Date(), updatedAt: new Date() },
        { comment: `You need to also set cors({credentials: true, origin: true})`, votes: 80, answerId: 5, userId: 17, createdAt: new Date(), updatedAt: new Date() },
        { comment: `how do you enable options preflight here?`, votes: 65, answerId: 5, userId: 10, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Its working fine for ajax request. I want CORS implementation for Script Tags and iFrame because in these requests the Origin is not present in the request header :( How to implement this ?`, votes: 56, answerId: 5, userId: 22, createdAt: new Date(), updatedAt: new Date() },
        { comment: `ahh You saved me`, votes: 66, answerId: 5, userId: 8, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Thank you. Your comment is my accepted answer :D`, votes: 83, answerId: 5, userId: 27, createdAt: new Date(), updatedAt: new Date() },
        { comment: `I believe OPTIONS happens before a GET, whereas if you're doing a POST - there is no OPTIONS request..`, votes: 48, answerId: 6, userId: 25, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Is config.allowedDomains a comma-delimited string or an array?`, votes: 7, answerId: 6, userId: 18, createdAt: new Date(), updatedAt: new Date() },
        { comment: `config.allowedDomains should be a space separated array`, votes: -8, answerId: 6, userId: 24, createdAt: new Date(), updatedAt: new Date() },
        { comment: `The extra session was removed by simply rearranging the express middleware order. On another note, this needs a little more security. if the origin is not in the allowed domain then the request is still processed, only the browser won't be able to see it plus the origin can be spoofed. My advice would be to do a check and if the origin is not in the allowed list then return 403 immediately. Also is any sensitive information is being served, validate the user via a session. `, votes: 32, answerId: 6, userId: 36, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Could you please explain what do you mean by space separated array?`, votes: 93, answerId: 6, userId: 12, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Thanks for suggesting this approach. Looks cleaner than having to add the setting of the headers in each of my resource. But I was hoping someone could explain why the preflight request using the OPTIONS method was not performed at all.`, votes: 29, answerId: 6, userId: 40, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Updated the answer, hope that helps.`, votes: 17, answerId: 6, userId: 6, createdAt: new Date(), updatedAt: new Date() },
        { comment: `for debug purposes use res.header('Access-Control-Allow-Origin', req.headers.origin); as res.header('Access-Control-Allow-Origin', config.allowedDomains);`, votes: 9, answerId: 6, userId: 35, createdAt: new Date(), updatedAt: new Date() },
        { comment: `This worked really well for me, using something like config = { allowedDomains : ["allowed.com"] };`, votes: 71, answerId: 6, userId: 39, createdAt: new Date(), updatedAt: new Date() },
        { comment: `I edited the answer and removed config.allowedDomains. As stated by the CORS spec, you can have only one domain in the Access-Control-Allow-Origin header (or * or null).`, votes: 66, answerId: 6, userId: 32, createdAt: new Date(), updatedAt: new Date() },
        { comment: `you should also set res.header('Access-Control-Allow-Credentials', 'true');`, votes: 23, answerId: 6, userId: 17, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Thank you very much. I made a mini test separately, this is why it took me a while to respond. I may come back with some questions in a few minutes just to make sure that I understand how this magic worked. I just want to put everything together. Thanks again. Browserify seems to rock! :)`, votes: 31, answerId: 7, userId: 9, createdAt: new Date(), updatedAt: new Date() },
        { comment: `I think JSPM should be added to the list. `, votes: 28, answerId: 7, userId: 34, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Could I get an example of using the <script> tag to import a React class without the use of a nodeJs package manager?`, votes: -4, answerId: 7, userId: 38, createdAt: new Date(), updatedAt: new Date() },
        { comment: `SystemJS and JSPM are very notable omissions.`, votes: 29, answerId: 7, userId: 22, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Yeah. Component is now deprecated github.com/componentjs/component`, votes: 77, answerId: 7, userId: 11, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Is this solution safe? I've heard you shouldn't set nodeIntegration to true - is that right? I am an Electron newbie so this is a genuine question.`, votes: -6, answerId: 8, userId: 27, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Well, it depends on how you are going to use your electron application. The comment thread of the original StackOverflow question I referenced gives a brief overview of the security aspects of doing this. You can follow the thread here. But in short: If this is set to true, your application has access to the node runtime, and if you are executing, potentially malicious, remote code, it's just a recipe for disaster.`, votes: 94, answerId: 8, userId: 16, createdAt: new Date(), updatedAt: new Date() },
        { comment: `This won't work if you don't use Electron. If you don't use Electron, the above code will fail with "Unexpected token '}'".`, votes: 82, answerId: 8, userId: 37, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Here stackoverflow.com/a/44591205/860099 is written "Module creates a scope to avoid name collisions." sou you can "manually" put val to window object window.val = val. Here is plunker: Plunker: plnkr.co/edit/aDyjyMxO1PdNaFh7ctBT?p=preview - this solution works`, votes: -5, answerId: 9, userId: 12, createdAt: new Date(), updatedAt: new Date() },
        { comment: `attention here: .parse(url,true) url.parse(urlStr, [parseQueryString], [slashesDenoteHost])`, votes: 29, answerId: 10, userId: 9, createdAt: new Date(), updatedAt: new Date() },
        { comment: `What additional/better functionality does hapi provide ( if any ) ?`, votes: 34, answerId: 10, userId: 9, createdAt: new Date(), updatedAt: new Date() },
        { comment: `This is accepted but it's not the preferred answer. See below! use req.query`, votes: 41, answerId: 10, userId: 4, createdAt: new Date(), updatedAt: new Date() },
        { comment: `mikemcneil's answer below is a better choice. Use req.query or req.param (which is different than req.params...see below.`, votes: 75, answerId: 10, userId: 3, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Code above is a deadweight — something a good developer will refactor on the spot. This is an answer to "How to get the query string of an URL?" — the URL in question just happens to be in an object named request and has nothing to do with Express. See whitequark's answer below (use request.query)`, votes: 11, answerId: 10, userId: 25, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Worth mentioning that you should use req.query.id, no need to use bracket notation.`, votes: -7, answerId: 11, userId: 5, createdAt: new Date(), updatedAt: new Date() },
        { comment: `To install express do it: yes | sudo npm install -g express --- I tried to edit but Alexis King have been reverted.`, votes: 96, answerId: 11, userId: 23, createdAt: new Date(), updatedAt: new Date() },
        { comment: `in the question he was looking for a way to get all the query string parameters like an array. The correct answer is this: app.get('/', function(req, res){ console.log(req.query); });`, votes: 5, answerId: 11, userId: 31, createdAt: new Date(), updatedAt: new Date() },
        { comment: `alex there's no advantage to using dot syntax over bracket notation. Really doesn't matter at all if you use one or the other`, votes: 30, answerId: 11, userId: 31, createdAt: new Date(), updatedAt: new Date() },
        { comment: `I've tested this script using Node, and I tried changing the file path to "/home/", but I got the following error: { [Error: EACCES, open '/home/test.txt'] errno: 3, code: 'EACCES', path: '/home/test.txt' }  How can I modify this script so that it will work outside of /tmp? `, votes: 67, answerId: 12, userId: 30, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Also note you can use fs.writeFileSync(...) to accomplish the same thing synchronously.`, votes: 64, answerId: 12, userId: 11, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Maybe it's a bit old, but @AndersonGreen, you need to run node as root or chmod /home properly to allow R/W permissions to current node process owner (your username tough) so you can write the file`, votes: 80, answerId: 12, userId: 36, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Actually, @DenysVitali, the problem is that jane should not be able to write any files into /home/.... Generally that directory is 755 root:wheel (or whatever). If node wants to write a file as jane, it's going to be easier to write to /home/jane/test.txt. Changing /home to something more permissive than 755 is a huge mistake.`, votes: 39, answerId: 12, userId: 25, createdAt: new Date(), updatedAt: new Date() },
        { comment: `JaneAvriette Well, since he wanted to save the file on /home directory I suggested to chmod it. I know it could generate a security issue. But well, if the user wants to save there, that's the solution. P.S: I agree with what you said (:`, votes: 86, answerId: 12, userId: 6, createdAt: new Date(), updatedAt: new Date() },
        { comment: `It doesn't have to mean 'abruptly closed'. It usually results from writing to a connection which the peer had already closed normally. That will cause it to issue an RST. `, votes: 86, answerId: 14, userId: 37, createdAt: new Date(), updatedAt: new Date() },
        { comment: `EJP There was a good reason why I wrote “abruptly”. The error (not warning) states the connection was reset by peer. An existing connection was forcibly closed by the remote peer. A forced close is abrupt since unexpected! (This normally results if peer application on remote machine is suddenly stopped, machine is rebooted, or peer application used a "hard close" on the remote socket. This error may also result if a connection was broken due to "keep-alive" activity detecting a failure while one or more operations are in progress… these operations and subsequent operations will fail.)`, votes: 9, answerId: 14, userId: 30, createdAt: new Date(), updatedAt: new Date() },
        { comment: `I get this error thrown when I batch send around 100 API calls near concurrently from the browser (Chrome) for testing. I imagine that Chrome must then become overloaded and kill some of the connections... @Samson - what is wrong with processing each request in its own domain and catching domain errors without restarting the server?`, votes: 81, answerId: 14, userId: 39, createdAt: new Date(), updatedAt: new Date() },
        { comment: `supershnee You should almost always restart your server after an uncaught exception since your data, application, and node.js itself is in an unknown state. Continuing after an exception puts your data a risk. If you want to find out more, check out Node's docs on process or Node's docs on domains.`, votes: 1, answerId: 14, userId: 33, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Is there anything wrong with the code? Should I have checked if the socket is writable before writing?`, votes: 10, answerId: 15, userId: 32, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Doh, didn't see that you already found the solution before I posted pretty much the same thing :) As to your question though, even if you check that the socket is writable, it may not be when you write to it microseconds later and would still throw an error, so this is "the way" to be sure.`, votes: -9, answerId: 15, userId: 2, createdAt: new Date(), updatedAt: new Date() },
        { comment: `ok, and is there a safe way out if this? like socket.close() inside the error handler? because i think my CPU load is increasing after these errors (not sure)`, votes: 59, answerId: 15, userId: 6, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Thanks, I nailed it myself! It s important not to let errors propagate to uncaughtException because it renders the whole app unstable. E.g. after catching around 10 ECONNRESET errors the server sometimes became unresponsive (just froze and didn t handle any connections)`, votes: 46, answerId: 16, userId: 34, createdAt: new Date(), updatedAt: new Date() },
        { comment: `Also knew about the node version change that didn t suppress the error any more, but seeing so many issues showing up and being solved each version I d rather go for the latest one. I m using V0.10.13 now btw –`, votes: 18, answerId: 16, userId: 17, createdAt: new Date(), updatedAt: new Date() },
      ], {});

  },

  down: (queryInterface, Sequelize) => {
    return queryInterface.bulkDelete('AnswerComments', null, { truncate: true, cascade: true, restartIdentity: true });
  }
};
